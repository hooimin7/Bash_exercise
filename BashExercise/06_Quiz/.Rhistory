DESeq2::plotPCA(rld, intgroup=c("condition"), ntop = 500)
# remember the default for ntop is 500,
# so the results would be the same if you left this out
dev.off()
# PCA is a technique used to emphasize variation and bring out strong patterns in the data.
# PCA:biological replicates belonging to the same experimental group to cluster together
# Hierarchical clustering also groups samples by expression similarity.
# A hierarchical tree indicates which samples are more similar to each other based on the normalized gene expression values
# A heatmap is used to show the correlation of gene expression for all pairwise combinations of samples in the data
# 6.4.1 Transformation
# unsupervised clustering methods such as PCA and hierarchical clustering are sensitive to the
# magnitude of the data ,transformation of the normalized counts improves the estimated correlations
# or distances between samples or genes for visualization.
# Transform the data using regularized log transformation
rld <- rlog(dds, blind=TRUE) # blind=TRUE to avoid using the condition information
# if conditions are expected to be VERY different in their total counts, it is a good idea to change this to blind == FALSE.
# 6.4.2 Principal component analysis
# Create a PCA using the DESeq2 function plotPCA()
# 500 most variable genes, which is the default value for the ntop option within the plotPCA() function
# PCA plot
DESeq2::plotPCA(rld, intgroup=c("condition"), ntop = 500) # intgroup is the grouping variable
# Save to a pdf using the pdf() device.
pdf("05_DiffExpr/fig1.pca.pdf") # open the pdf device
DESeq2::plotPCA(rld, intgroup=c("condition"), ntop = 500) # remember the default for ntop is 500,
# Save to a pdf using the pdf() device.
pdf("05_DiffExpr/fig1.pca.pdf") # open the pdf device
DESeq2::plotPCA(rld, intgroup=c("condition"), ntop = 500) # remember the default for ntop is 500,
# so the results would be the same if you left this out
# remember the default for ntop is 500,
# so the results would be the same if you left this out
dev.off() # close the pdf device
DESeq2::plotPCA(rld, intgroup=c("condition"), ntop = 500) # intgroup is the grouping variable
# Save to a pdf using the pdf() device.
pdf("05_DiffExpr/fig1.pca.pdf") # open the pdf device
DESeq2::plotPCA(rld, intgroup=c("condition"), ntop = 500) # remember the default for ntop is 500,
# so the results would be the same if you left this out
# remember the default for ntop is 500,
# so the results would be the same if you left this out
dev.off() # close the pdf device
# Save to a pdf using the pdf() device.
pdf("05_DiffExpr/fig1.pca.pdf") # open the pdf device
DESeq2::plotPCA(rld, intgroup=c("condition"), ntop = 500) # remember the default for ntop is 500,
# so the results would be the same if you left this out
# remember the default for ntop is 500,
# so the results would be the same if you left this out
dev.off() # close the pdf device
# 6.4.3 Hierarchical clustering
# visualize which samples cluster together when using all of the filtered, normalized and
# transformed expression data
# creating a distance matrix among samples using stats::dist().
distsRL <- dist(t(assay(rld)))
mat <- as.matrix(distsRL)
# rename the columns and rows of the matrix with the column names from the dds
rownames(mat) <- colnames(mat) <- with(colData(dds),
paste(condition, sampleNames, sep=" : "))
# clustering analysis on the samples using the function stats::hclust()
stats::hclust()
# clustering analysis on the samples using the function stats::hclust()
hc <- hclust(distsRL)
# Visualize the distance between samples using a heatmap
# show the clustering of samples using a dendrogram
install.packages("ComplexHeatmap")
hmcol <- colorRampPalette(brewer.pal(9, "GnBu"))(100)
# Plot the heatmap
heatmap.2(mat,
Rowv=as.dendrogram(hc),
symm=TRUE,
trace="none",
col = rev(hmcol),
margin=c(13, 13))
# save the heatmap with the pdf() device
pdf("05_DiffExpr/fig2.heatmap.pdf")
heatmap.2(mat,
Rowv=as.dendrogram(hc),
symm=TRUE,
trace="none",
col = rev(hmcol),
margin=c(13, 13))
dev.off()
##
# The heatmap also shows that the samples cluster by condition.
# 6.5 Differential expression
# we have checked the quality of our samples to see if they fit the expectation of our experimental design
# have checked our samples for outliers and explored patterns using dimension reduction and clustering
# conduct differential expression analysis
# run the actual analysis, we use the function DESeq().
# It performs the normalization of the counts using the size factors, estimates dispersion, and fits the linear
# model
# Use the assign arrow(<-) to replace the old dds object with the newly fitted object
# Run the analysis
dds <- DESeq(dds)
# function: y = a/x + b, and a local regression fit was automatically substituted.
# specify fitType='local' or 'mean' to avoid this message next time.
# final dispersion estimates
# fitting model and testing
# 6.5.1 Identifying DE genes
# With DESeq2, the Wald test is commonly used for hypothesis testing when comparing two groups
# To indicate to DESEq2 the two groups we want to compare, we provide contrasts, or
# the specific pair of groups we want to test
# we have to check what contrasts are possible given our data and design formula
# check what contrasts are even possible
DESeq2::resultsNames(dds)
# Extract the results for Poor vs. Rich
# specify the contrast by naming the factor you want to test and
# the levels of the factor you want to compare.
contrast_pr <- c("condition", "poor", "rich")
# extract the results for your specified contrast
res_table <- results(dds, contrast=contrast_pr)
# alternatively you could use:
# alternatively you could use:
# res_table <- results(dds, name = "condition_rich_vs_poor")
# Wald test statistic is computed per-gene, and evaluates the probability that a test statistic at least as
# extreme as the observed value would occur at at random
# We reject the null hypothesis (i.e. there is no difference in expression between groups) and conclude
# a gene is differentially expressed when the calculated p-value is below our significance threshold
# (usually 0.05).
# sort results based on significance
res_table <- res_table[order(res_table$padj),]
# You will now have the smallest padj values at the top of your table
head(res_table)
# Extract the results for Poor vs. Rich
# specify the contrast by naming the factor you want to test and
# the levels of the factor you want to compare.
contrast_pr <- c("condition", "poor", "rich")
# extract the results for your specified contrast
res_table <- results(dds, contrast=contrast_pr)
# alternatively you could use:
# res_table <- results(dds, name = "condition_rich_vs_poor")
# Wald test statistic is computed per-gene, and evaluates the probability that a test statistic at least as
# extreme as the observed value would occur at at random
# We reject the null hypothesis (i.e. there is no difference in expression between groups) and conclude
# a gene is differentially expressed when the calculated p-value is below our significance threshold
# (usually 0.05).
# sort results based on significance
res_table <- res_table[order(res_table$padj),]
# You will now have the smallest padj values at the top of your table
head(res_table)
# function: y = a/x + b, and a local regression fit was automatically substituted.
# specify fitType='local' or 'mean' to avoid this message next time.
# final dispersion estimates
# fitting model and testing
# 6.5.1 Identifying DE genes
# With DESeq2, the Wald test is commonly used for hypothesis testing when comparing two groups
# To indicate to DESEq2 the two groups we want to compare, we provide contrasts, or
# the specific pair of groups we want to test
# we have to check what contrasts are possible given our data and design formula
# check what contrasts are even possible
DESeq2::resultsNames(dds)
# The column headers are:
#   • baseMean: mean of normalized counts for all samples
# • log2FoldChange: log2 fold change
# • lfcSE: standard error of log2 fold change
# • stat: the Wald test statistic
# • pval: Wald test p-value
# • padj: Benjamini-Hochberg (BH) adjusted p-values
# write your results into a separate file and save them to your computer
# first convert the rownames to the first column of the dataframe so that
# when we write it out to a table, we have our gene names as well.
gene_id = rownames(res_table)
res_table <- cbind(gene_id , data.frame(res_table, row.names=NULL))
# write the result table in a file.
write.table(res_table , file = "05_DiffExpr/diffExpr.tab", sep = "\t", quote = FALSE,
row.names = FALSE)
# Adjusting the p-values to account for testing multiple genes helps us to have more confidence in our conclusions.
# can use log2 fold change (LFC), to identify DE genes
# common threshold is an absolute LFC of 1, which means expression of that gene is twice as much in one of the conditions compared
# to the other
# If you just want a list of the genes that have an adjusted p-value cutoff below a certain threshold and above
# an absolute log fold change threshold, we can easily subset the results table. Here we will use thresholds of
# padj < 0.05 and log2FoldChange < -1 or log2FoldChange > 1.
resSig <- subset(res_table , padj < 0.05 & abs(log2FoldChange) > 1)
write.table(resSig, file = "05_DiffExpr/diffExpr.sig05.tab", sep = "\t", quote = FALSE,
row.names = FALSE)
# significantly differentially expressed genes had a negative log2FoldChange
# and how many had a positive log2FoldChange.
# call genes with a positive log2FoldChange as “upregulated” and genes with
# a negative log2FoldChange as downregulated
# identify genes that are "upregulated" in group 1 relative to group 2
resSig_upreg <- rownames(resSig)[resSig$log2FoldChange > 0]
length(resSig_upreg)
# [1] 116
# identify genes that are "downregulated" in group 1 relative to group 2
resSig_downreg <- rownames(resSig)[resSig$log2FoldChange < 0]
length(resSig_downreg)
e_gw1.29.217.1                              147.326        2.23810 0.1605483   13.9404  3.60119e-44  4.03513e-41### [1] 116
# significantly differentially expressed genes had a negative log2FoldChange
# and how many had a positive log2FoldChange.
# call genes with a positive log2FoldChange as “upregulated” and genes with
# a negative log2FoldChange as downregulated
# identify genes that are "upregulated" in group 1 relative to group 2
resSig_upreg <- rownames(resSig)[resSig$log2FoldChange > 0]
length(resSig_upreg)
# [1] 116
# identify genes that are "downregulated" in group 1 relative to group 2
resSig_downreg <- rownames(resSig)[resSig$log2FoldChange < 0]
length(resSig_downreg)
# [1] 156
# What does a positive or negative log2FoldChange actually mean for this comparison?
# Positive log2FoldChange: Upregulated in "poor" compared to "rich."
# Negative log2FoldChange: Downregulated in "poor" compared to "rich."
# The log2FoldChange is the log2 of the fold change, which is the ratio of the normalized counts in the two groups.
# A positive log2FoldChange means that the normalized counts in the first group are higher than the normalized counts in the second group.
# A negative log2FoldChange means that the normalized counts in the second group are higher than the normalized counts in the first group.
# 6.5.2 Visualizing DE Genes
# 6.5.2.1 Individual genes
# the gene that is most differentially expressed (i.e., lowest padj) in the sorted results table using head().
head(resSig, 1)
# gene_id baseMean log2FoldChange     lfcSE     stat        pvalue          padj
# 1 fgenesh1_kg.12__183__Locus432v1rpkm387.16 588.7405       3.861403 0.1208459 31.95313 4.888133e-224 3.286292e-220
# Is it up or down-regulated in P. involutus on poor nutrient media relative to rich nutrient media?
plotCounts(dds, gene="fgenesh1_kg.12__183__Locus432v1rpkm387.16", intgroup="condition")
# gene_id baseMean log2FoldChange     lfcSE     stat        pvalue          padj
# 1 fgenesh1_kg.12__183__Locus432v1rpkm387.16 588.7405       3.861403 0.1208459 31.95313 4.888133e-224 3.286292e-220
# Is it up or down-regulated in P. involutus on poor nutrient media relative to rich nutrient media?
plotCounts(dds, gene="fgenesh1_kg.12__183__Locus432v1rpkm387.16", intgroup="condition")
tail(resSig, 1) # 1 = the last row)
# gene_id baseMean log2FoldChange     lfcSE     stat        pvalue          padj
# 1 fgenesh1_kg.12__183__Locus432v1rpkm387.16 588.7405       3.861403 0.1208459 31.95313 4.888133e-224 3.286292e-220
# Is it up or down-regulated in P. involutus on poor nutrient media relative to rich nutrient media?
plotCounts(dds, gene="fgenesh1_kg.12__183__Locus432v1rpkm387.16", intgroup="condition")
tail(resSig, 1) # 1 = the last row)
# [1] 156
# What does a positive or negative log2FoldChange actually mean for this comparison?
# Positive log2FoldChange: Upregulated in "poor" compared to "rich."
# Negative log2FoldChange: Downregulated in "poor" compared to "rich."
# The log2FoldChange is the log2 of the fold change, which is the ratio of the normalized counts in the two groups.
# A positive log2FoldChange means that the normalized counts in the first group are higher than the normalized counts in the second group.
# A negative log2FoldChange means that the normalized counts in the second group are higher than the normalized counts in the first group.
# 6.5.2 Visualizing DE Genes
# 6.5.2.1 Individual genes
# the gene that is most differentially expressed (i.e., lowest padj) in the sorted results table using head().
head(resSig, 1) # 1 = the first row
# why the plot keep changing?
# the x-axis keep changing due to the different number of samples in each group (plotCounts), but the y-axis is the same
# The plotCounts() function plots the normalized counts for each sample for a given gene.
# 6.5.3 All genes: MA plot
# MA plot shows the mean of the normalized counts (x-axis) versus the LFC (y-axis) for all genes.
# genes that are significantly differentially expressed are colored to be easily identified
# The default significance threshold is 0.1, but today let’s use p < 0.05
# positive LFC values mean the genes are more expressed in poor nutrients
# MA plot needs the dds object
plotMA(dds, ylim=c(-2,2), main="DESeq2", alpha = 0.05)
# save the MA plot using the pdf() device
pdf("05_DiffExpr/fig3.MA.pdf")
plotMA(dds, ylim=c(-2,2), main="DESeq2", alpha = 0.05)
dev.off()
# change shrinkage.
# 6.5.4 Subset of genes: heatmap
# Make a heatmap of the 50 most differentially expressed (lowest p-value) genes:
#   • subset the resuls table to only include significantly differentially expressed genes using an absolute log2
# fold change cutoff of 1 (abs(log2FoldChange) > 1) and an adjusted p-value cutoff of 0.01.
# • create a list of the 50 most differentially expressed gene IDs from your results table
# • subset the VST transformed expression matrix to include only the rows for these 50 genes.
# • make a heatmap of this subset using ‘pheatmap.
# • save your result using the pdf() device
# Identify the top 50 differentially expressed genes from the sorted results table.
top50 <-res_table$gene_id[res_table$padj < 0.05 & abs(res_table$log2FoldChange) > 1][1:50]
# change shrinkage.
# 6.5.4 Subset of genes: heatmap
# Make a heatmap of the 50 most differentially expressed (lowest p-value) genes:
#   • subset the resuls table to only include significantly differentially expressed genes using an absolute log2
# fold change cutoff of 1 (abs(log2FoldChange) > 1) and an adjusted p-value cutoff of 0.01.
# • create a list of the 50 most differentially expressed gene IDs from your results table
# • subset the VST transformed expression matrix to include only the rows for these 50 genes.
# • make a heatmap of this subset using ‘pheatmap.
# • save your result using the pdf() device
# Identify the top 50 differentially expressed genes from the sorted results table.
top50 <-res_table$gene_id[res_table$padj < 0.05 & abs(res_table$log2FoldChange) > 1][1:50]
# Extract the expression levels of the most expressed genes from the vst-transformed dds object
counts_top50 <- counts(dds, normalized=TRUE)[top50,]
hmcol <- colorRampPalette(brewer.pal(9, "YlOrRd"))(100)
heatmap.2(counts_top50,
col = hmcol ,
Rowv = FALSE ,
Colv = FALSE,
scale = "none",
dendrogram = "none",
trace = "none")
# Save with pdf()
pdf("05_DiffExpr/fig4.heatmap_sig_diff_exp.pdf")
heatmap.2(counts_top50,
col = hmcol ,
Rowv = FALSE ,
Colv = FALSE,
scale = "none",
dendrogram = "none",
trace = "none",
margin = c(10,6))
dev.off()
# 7 Additional Exercises
# 19. How many genes show a significant difference in expression on the FDR level of 0.01? Compare with
# the above result
# Answer: 272
resSig <- subset(res_table , padj < 0.01 & abs(log2FoldChange) > 1) # abs(log2FoldChange) > 1 means the absolute value of log2FoldChange is greater than 1
write.table(resSig, file = "05_DiffExpr/diffExpr.sig05.tab", sep = "\t", quote = FALSE,
row.names = FALSE)
# 7 Additional Exercises
# 19. How many genes show a significant difference in expression on the FDR level of 0.01? Compare with
# the above result
# Answer: 272
resSig <- subset(res_table , padj < 0.01 & abs(log2FoldChange) > 1) # abs(log2FoldChange) > 1 means the absolute value of log2FoldChange is greater than 1
# How many genes show a significant difference
print(resSig))
# How many genes show a significant difference
print(resSig)
View(resSig)
View(resSig)
setwd("~/BashExercise/06_Quiz")
library(DESeq2)
library(magrittr)
# load the packages
library(DESeq2)
library(gplots)
library(pheatmap)
library(RColorBrewer)
library(magrittr)
rm(list = ls())
# load the packages
library(DESeq2)
library(gplots)
library(pheatmap)
library(RColorBrewer)
library(magrittr)
# read the count matrix
countMatrix <- read.csv("06_Quiz/transcriptomicsQuizData.txt",
sep = "\t", row.names = "gene_id") %>%
as.matrix()
# check the column names of the count matrix
colnames(countMatrix)
# read the count matrix
countMatrix <- read.csv("06_Quiz/transcriptomicsQuizData.txt",
sep = "\t", row.names = "gene_id") %>%
as.matrix()
setwd("~/BashExercise/06_Quiz")
getwd()
# read the count matrix
countMatrix <- read.csv("06_Quiz/transcriptomicsQuizData.txt",
sep = "\t", row.names = "gene_id") %>%
as.matrix()
# read the count matrix
countMatrix <- read.csv("06_Quiz",
sep = "\t", row.names = "gene_id") %>%
as.matrix()
# check the column names of the count matrix
colnames(countMatrix)
setwd("~/BashExercise/06_Quiz")
# read the count matrix
countMatrix <- read.csv("06_Quiz",
sep = "\t", row.names = "gene_id") %>%
as.matrix()
# read the count matrix
countMatrix <- read.csv("transcriptomicsQuizData.txt",
sep = "\t", row.names = "gene_id") %>%
as.matrix()
# check the column names of the count matrix
colnames(countMatrix)
rm(list = ls())
# load the packages
library(DESeq2)
library(gplots)
library(pheatmap)
library(RColorBrewer)
library(magrittr)
getwd()
# read the count matrix
countMatrix <- read.csv("transcriptomicsQuizData.txt",
sep = "\t", row.names = "gene_id") %>%
as.matrix()
# check the column names of the count matrix
colnames(countMatrix)
View(countMatrix)
# define the sample names
sampleNames <- c("Pca_Ribes_rep1", "Pca_Ribes_rep2", "Pca_Ribes_rep3",
"Pca_Ribes_rep4", "Pca_Ribes_rep5", "Pca_Ribes_rep6",
"Pca_Ribes_rep7", "Pca_Ribes_rep8", "Pca_Ribes_rep9",
"Pca_Salix_rep1", "Pca_Salix_rep2", "Pca_Salix_rep3",
"Pca_Salix_rep4", "Pca_Salix_rep5", "Pca_Salix_rep6",
"Pca_Salix_rep7", "Pca_Salix_rep8", "Pca_Salix_rep9",
"Pca_Urtica_rep1", "Pca_Urtica_rep2", "Pca_Urtica_rep3",
"Pca_Urtica_rep4", "Pca_Urtica_rep5", "Pca_Urtica_rep6",
"Pca_Urtica_rep7", "Pca_Urtica_rep8", "Pca_Urtica_rep9")
sampleNames # Check
# Define the sample conditions
sampleConditions <- c("Ribes", "Ribes", "Ribes",
"Ribes", "Ribes", "Ribes",
"Ribes", "Ribes", "Ribes",
"Salix", "Salix", "Salix",
"Salix", "Salix", "Salix",
"Salix", "Salix", "Salix",
"Urtica", "Urtica", "Urtica",
"Urtica", "Urtica", "Urtica",
"Urtica", "Urtica", "Urtica")
sampleConditions # check
# Create a sample table from the sample conditions
sampleTable <- data.frame(condition = as.factor(sampleConditions))
View(sampleTable)
row.names(sampleTable) <- sampleNames # Set the first column as row names
sampleTable # Check
# compare matrix column names with sample names
colnames(countMatrix) %in% rownames(sampleTable)
# Create the deseq object using the count matrix and sample table.
# Specify the design veriable as condition
dds <- DESeqDataSetFromMatrix(countData = countMatrix,
colData = sampleTable,
design = ~ condition)
dds #Check
rm(list = ls())
# load the packages
library(DESeq2)
library(gplots)
library(pheatmap)
library(RColorBrewer)
library(magrittr)
getwd()
# read the count matrix
countMatrix <- read.csv("transcriptomicsQuizData.txt",
sep = "\t", row.names = "gene_id") %>%
as.matrix()
# check the column names of the count matrix
colnames(countMatrix)
# define the sample names
sampleNames <- c("Pca_Ribes_rep1", "Pca_Ribes_rep2", "Pca_Ribes_rep3",
"Pca_Ribes_rep4", "Pca_Ribes_rep5", "Pca_Ribes_rep6",
"Pca_Ribes_rep7", "Pca_Ribes_rep8", "Pca_Ribes_rep9",
"Pca_Salix_rep1", "Pca_Salix_rep2", "Pca_Salix_rep3",
"Pca_Salix_rep4", "Pca_Salix_rep5", "Pca_Salix_rep6",
"Pca_Salix_rep7", "Pca_Salix_rep8", "Pca_Salix_rep9",
"Pca_Urtica_rep1", "Pca_Urtica_rep2", "Pca_Urtica_rep3",
"Pca_Urtica_rep4", "Pca_Urtica_rep5", "Pca_Urtica_rep6",
"Pca_Urtica_rep7", "Pca_Urtica_rep8", "Pca_Urtica_rep9")
sampleNames # Check
# Define the sample conditions
sampleConditions <- c("Ribes", "Ribes", "Ribes",
"Ribes", "Ribes", "Ribes",
"Ribes", "Ribes", "Ribes",
"Salix", "Salix", "Salix",
"Salix", "Salix", "Salix",
"Salix", "Salix", "Salix",
"Urtica", "Urtica", "Urtica",
"Urtica", "Urtica", "Urtica",
"Urtica", "Urtica", "Urtica")
sampleConditions # check
# Create a sample table from the sample conditions
sampleTable <- data.frame(condition = as.factor(sampleConditions))
row.names(sampleTable) <- sampleNames # Set the first column as row names
sampleTable # Check
# compare matrix column names with sample names
colnames(countMatrix) %in% rownames(sampleTable)
# Create the deseq object using the count matrix and sample table.
# Specify the design veriable as condition
dds <- DESeqDataSetFromMatrix(countData = countMatrix,
colData = sampleTable,
design = ~ condition)
dds #Check
dds <- estimateSizeFactors(dds) # Estimate the size factors
sizeFactors(dds) # Check the size factors
dds <- estimateSizeFactors(dds) # Estimate the size factors
sizeFactors(dds) # Check the size factors
normalized_counts <- as.data.frame(counts(dds, normalized=TRUE))
head(normalized_counts)
summary(normalized_counts) # Check
DESeq2::plotPCA(rld, intgroup=c("condition"), ntop = 1000)
rld <- rlog(dds, blind=TRUE) # Transform the data using rlog
DESeq2::plotPCA(rld, intgroup=c("condition"), ntop = 1000)
# Using a regularized log transformation, make a PCA plot of the top 1000 most variable genes. Do the
# samples cluster more by condition on the first or second PC axes, both or neither
# Answer: PC1
pdf("06_Quiz/fig1.pca.pdf") # open the pdf device
DESeq2::plotPCA(rld, intgroup=c("condition"), ntop = 1000)
dev.off()
# Using a regularized log transformation, make a PCA plot of the top 1000 most variable genes. Do the
# samples cluster more by condition on the first or second PC axes, both or neither
# Answer: PC1
pdf("06_Quiz/fig1.pca.pdf") # open the pdf device
DESeq2::plotPCA(rld, intgroup=c("condition"), ntop = 1000)
dev.off()
# Using a regularized log transformation, make a PCA plot of the top 1000 most variable genes. Do the
# samples cluster more by condition on the first or second PC axes, both or neither
# Answer: PC1
pdf("fig1.pca.pdf") # open the pdf device
DESeq2::plotPCA(rld, intgroup=c("condition"), ntop = 1000)
dev.off()
# 3. Run DESeq on the dds. Extract the results for Urtica vs. Ribes. Identify the most differentially
# expressed gene using the adjusted P-value (padj)
dds <- DESeq(dds)
DESeq2::resultsNames(dds)
# [1] "Intercept"                 "condition_Salix_vs_Ribes"  "condition_Urtica_vs_Ribes"
contrast_UR <- c("condition", "Urtica", "Ribes") # Define the contrast
res_table <- results(dds, contrast=contrast_UR) # Extract the results
res_table <- res_table[order(res_table$padj),] # Order the results by padj
head(res_table) # Check
#                baseMean log2FoldChange     lfcSE      stat      pvalue        padj
# <numeric>      <numeric> <numeric> <numeric>   <numeric>   <numeric>
#   Polcal_g14648   151.939       -7.88699  0.641400  -12.2965 9.45626e-35 9.72482e-31
# 4. What is the expression of the gene you identified in Question 3 in Ribes relative to Urtica (rounded
# to 3 significant digits)?
# Answer: -7.88699 downregulated, 2**-7.88699 = 0.002 (1/128 = 0.0078125)
# 5. Using an adjusted p-value threshold of 0.01 and an absolute log2FoldChange threshold of 1, how many
# genes were differentially expressed between larvae fed on Ribes and larvae fed on Urtica?
resSig <- subset(res_table , padj < 0.01 & abs(log2FoldChange) >= 1) # Subset the results
write.table(resSig, file = "diffExpr.sig06.tab", sep = "\t", quote = FALSE,
row.names = FALSE)
length(resSig) # Check the number of genes
result <- 2^7
print(result)
result <- 2^7.88699
print(result)
setwd("~/BashExercise/06_Quiz")
View(countMatrix)
View(res_table)
# Print the number of significantly differentially expressed genes
print(nrow(resSig))
