library(ggplot2)
library(dplyr)
library(tidyverse)
samplelist <- read_tsv("PnNmmmrv_filtered_species.list",
col_names = c("sample", "species"),
show_col_types = FALSE)
read_delim("ProjTaxa_no_Naxos2_minDP_maxDP_maxMiss.recode.vcf.filtered.2.Q",
col_names = paste0("Q",seq(1:2)),
delim=" ")
all_data <- tibble(sample=character(),
k=numeric(),
Q=character(),
value=numeric())
for (k in 2:4){
data <- read_delim(paste0("ProjTaxa_no_Naxos2_minDP_maxDP_maxMiss.recode.vcf.filtered.",k,".Q"),
col_names = paste0("Q",seq(1:k)),
delim=" ")
data$sample <- samplelist$sample
data$k <- k
#This step converts from wide to long.
data %>% gather(Q, value, -sample,-k) -> data
all_data <- rbind(all_data,data)
}
all_data
all_data %>%
filter(k == 2) %>%
mutate(sample = factor(sample, levels = unique(sample))) %>%
ggplot(aes(x=sample, y= "Ancestry proportions", fill=Q)) +
geom_bar(stat="identity", position="stack") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
all_data %>%
filter(k == 2) %>%
mutate(sample = factor(sample, levels = unique(sample))) %>%
ggplot(aes(x=sample, y= "value", fill=Q)) +
geom_bar(stat="identity", position="stack") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
all_data %>%
filter(k == 2) %>%
mutate(sample = factor(sample, levels = unique(sample))) %>%
ggplot(aes(x=sample, y=value, fill=Q)) +
geom_bar(stat="identity", position="stack") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
View(all_data)
View(data)
View(samplelist)
rm(list = ls())
# Load necessary library
library(ggplot2)
library(dplyr)
library(tidyverse)
samplelist <- read_tsv("PnNmmmrv_filtered_species.list",
col_names = c("sample", "species"),
show_col_types = FALSE)
read_delim("ProjTaxa_no_Naxos2_minDP_maxDP_maxMiss.recode.vcf.filtered.2.Q",
col_names = paste0("Q",seq(1:2)),
delim=" ")
# create an empty tibble to store the data
all_data <- tibble(sample=character(),
k=numeric(),
Q=character(),
value=numeric())
for (k in 2:4){ # loop through the Q files
data <- read_delim(paste0("ProjTaxa_no_Naxos2_minDP_maxDP_maxMiss.recode.vcf.filtered.",k,".Q"),
col_names = paste0("Q",seq(1:k)), # create column names
delim=" ") # specify the delimiter
data$sample <- samplelist$sample # add sample column
data$k <- k # add k column
#This step converts from wide to long.
data %>% gather(Q, value, -sample,-k) -> data
all_data <- rbind(all_data,data)
}
all_data # print the data
all_data %>%
filter(k == 2) %>% # filter for k = 2
mutate(sample = factor(paste(sample, "(k=2)"), levels = unique(paste(sample, "(k=2)")))) %>%
ggplot(aes(x=sample, y=value, fill=Q)) +
geom_bar(stat="identity", position="stack") +
scale_x_discrete(name = "Sample") +
ylab("Admixture proportions") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
rm(list = ls())
# Load necessary library
library(ggplot2)
library(dplyr)
library(tidyverse)
samplelist <- read_tsv("PnNmmmrv_filtered_species.list",
col_names = c("sample", "species"),
show_col_types = FALSE)
read_delim("ProjTaxa_no_Naxos2_minDP_maxDP_maxMiss.recode.vcf.filtered.2.Q",
col_names = paste0("Q",seq(1:2)),
delim=" ")
# create an empty tibble to store the data
all_data <- tibble(sample=character(),
k=numeric(),
Q=character(),
value=numeric())
for (k in 2:4){ # loop through the Q files
data <- read_delim(paste0("ProjTaxa_no_Naxos2_minDP_maxDP_maxMiss.recode.vcf.filtered.",k,".Q"),
col_names = paste0("Q",seq(1:k)), # create column names
delim=" ") # specify the delimiter
data$sample <- samplelist$sample # add sample column
data$k <- k # add k column
#This step converts from wide to long.
data %>% gather(Q, value, -sample,-k) -> data
all_data <- rbind(all_data,data)
}
all_data # print the data
all_data %>%
filter(k == 2) %>% # filter for k = 2
mutate(sample = factor(sample, levels = unique(sample))) %>%
ggplot(aes(x=sample, y=value, fill=Q)) +
geom_bar(stat="identity", position="stack") +
scale_x_discrete(name = "Sample") +
ylab("Admixture proportions") +
annotate("text", x = Inf, y = -Inf, label = "k=2", vjust = 1.5, hjust = 1) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
rm(list = ls())
# Load necessary library
library(ggplot2)
library(dplyr)
library(tidyverse)
samplelist <- read_tsv("PnNmmmrv_filtered_species.list",
col_names = c("sample", "species"),
show_col_types = FALSE)
read_delim("ProjTaxa_no_Naxos2_minDP_maxDP_maxMiss.recode.vcf.filtered.2.Q",
col_names = paste0("Q",seq(1:2)),
delim=" ")
# create an empty tibble to store the data
all_data <- tibble(sample=character(),
k=numeric(),
Q=character(),
value=numeric())
for (k in 2:4){ # loop through the Q files
data <- read_delim(paste0("ProjTaxa_no_Naxos2_minDP_maxDP_maxMiss.recode.vcf.filtered.",k,".Q"),
col_names = paste0("Q",seq(1:k)), # create column names
delim=" ") # specify the delimiter
data$sample <- samplelist$sample # add sample column
data$k <- k # add k column
#This step converts from wide to long.
data %>% gather(Q, value, -sample,-k) -> data
all_data <- rbind(all_data,data)
}
all_data # print the data
all_data %>%
filter(k == 2) %>% # filter for k = 2
mutate(sample = factor(sample, levels = unique(sample))) %>%
ggplot(aes(x=sample, y=value, fill=Q)) +
geom_bar(stat="identity", position="stack") +
scale_x_discrete(name = "Sample") +
ylab("Admixture proportions") +
labs(subtitle = "k=2") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
all_data %>%
filter(k == 2) %>% # filter for k = 2
mutate(sample = factor(sample, levels = unique(sample))) %>%
ggplot(aes(x=sample, y=value, fill=Q)) +
geom_bar(stat="identity", position="stack") +
scale_x_discrete(name = "Sample") +
ylab("Admixture proportions") +
labs(subtitle = "K = 2") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
all_data %>%
ggplot(.,aes(x=sample,y=value,fill=factor(Q))) +
geom_bar(stat="identity",position="stack") +
xlab("Sample") + ylab("Ancestry") +
theme_bw() +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
scale_fill_brewer(palette="Set1",name="K",
labels=seq(1:5)) +
facet_wrap(~k,ncol=1)
# plot the data for k = 2, 3, 4
all_data %>%
ggplot(.,aes(x=sample,y=value,fill=factor(Q))) +
geom_bar(stat="identity",position="stack") +
xlab("Sample") + ylab("Admixture proportions") +
theme_bw() +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
scale_fill_brewer(palette="Set1",name="Q",
labels=seq(1:5)) +
facet_wrap(~k,ncol=1)
View(data)
rm(list = ls())
# Load necessary library
library(ggplot2)
library(dplyr)
library(tidyverse)
samplelist <- read_tsv("PnNmmmrv_filtered_species.list",
col_names = c("sample", "species"),
show_col_types = FALSE)
read_delim("ProjTaxa_no_Naxos2_minDP_maxDP_maxMiss.recode.vcf.filtered.2.Q",
col_names = paste0("Q",seq(1:2)),
delim=" ")
# create an empty tibble to store the data
all_data <- tibble(sample=character(),
k=numeric(),
Q=character(),
value=numeric())
for (k in 2:4){ # loop through the Q files
data <- read_delim(paste0("ProjTaxa_no_Naxos2_minDP_maxDP_maxMiss.recode.vcf.filtered.",k,".Q"),
col_names = paste0("Q",seq(1:k)), # create column names
delim=" ") # specify the delimiter
data$sample <- samplelist$sample # add sample column
data$k <- k # add k column
#This step converts from wide to long.
data %>% gather(Q, value, -sample,-k) -> data
all_data <- rbind(all_data,data)
}
all_data # print the data
# plot the data
all_data %>%
filter(k == 2) %>% # filter for k = 2
mutate(sample = factor(sample, levels = unique(sample))) %>%
ggplot(aes(x=sample, y=value, fill=Q)) +
geom_bar(stat="identity", position="stack") +
scale_x_discrete(name = "Sample") +
ylab("Admixture proportions") +
labs(subtitle = "K = 2") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# plot the data for k = 2, 3, 4
all_data %>%
ggplot(.,aes(x=sample,y=value,fill=factor(Q))) +
geom_bar(stat="identity",position="stack") +
xlab("Sample") + ylab("Admixture proportions") +
theme_bw() +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
scale_fill_brewer(palette="Set1",name="Q",
labels=seq(1:5)) +
facet_wrap(~k,ncol=1)
View(all_data)
View(data)
View(samplelist)
View(data)
View(all_data)
View(all_data)
View(data)
rm(list = ls())
# Load necessary library
library(ggplot2)
library(dplyr)
library(tidyverse)
samplelist <- read_tsv("PnNmmmrv_filtered_species.list",
col_names = c("sample", "species"),
show_col_types = FALSE)
read_delim("ProjTaxa_no_Naxos2_minDP_maxDP_maxMiss.recode.vcf.filtered.2.Q",
col_names = paste0("Q",seq(1:2)),
delim=" ")
# create an empty tibble to store the data
all_data <- tibble(sample=character(),
k=numeric(),
Q=character(),
value=numeric())
for (k in 2:4){ # loop through the Q files
data <- read_delim(paste0("ProjTaxa_no_Naxos2_minDP_maxDP_maxMiss.recode.vcf.filtered.",k,".Q"),
col_names = paste0("Q",seq(1:k)), # create column names
delim=" ") # specify the delimiter
data$sample <- samplelist$sample # add sample column
data$k <- k # add k column
#This step converts from wide to long.
data %>% gather(Q, value, -sample,-k) -> data
all_data <- rbind(all_data,data)
}
all_data # print the data
# plot the data
all_data %>%
filter(k == 2) %>% # filter for k = 2
mutate(sample = factor(sample, levels = unique(sample))) %>%
ggplot(aes(x=sample, y=value, fill=Q)) +
geom_bar(stat="identity", position="stack") +
scale_x_discrete(name = "Sample") +
ylab("Admixture proportions") +
labs(subtitle = "K = 2") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# plot the data for k = 2, 3, 4
all_data %>%
ggplot(.,aes(x=sample,y=value,fill=factor(Q))) +
geom_bar(stat="identity",position="stack") +
xlab("Sample") + ylab("Admixture proportions") +
theme_bw() +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
scale_fill_brewer(palette="Set1",name="K",
labels=seq(2:4)) +
facet_wrap(~k,ncol=1)
# plot the data for k = 2
all_data %>%
filter(k == 2) %>% # filter for k = 2
mutate(sample = factor(sample, levels = unique(sample))) %>%
ggplot(aes(x=sample, y=value, fill=K)) +
geom_bar(stat="identity", position="stack") +
scale_x_discrete(name = "Sample") +
ylab("Admixture proportions") +
labs(subtitle = "K = 2") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# plot the data for k = 2
all_data %>%
filter(k == 2) %>% # filter for k = 2
mutate(sample = factor(sample, levels = unique(sample))) %>%
ggplot(aes(x=sample, y=value, fill=Q)) +
geom_bar(stat="identity", position="stack") +
scale_x_discrete(name = "Sample") +
ylab("Admixture proportions") +
labs(subtitle = "K = 2") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# plot the data for k = 2
all_data %>%
filter(k == 2) %>% # filter for k = 2
mutate(sample = factor(sample, levels = unique(sample))) %>%
ggplot(aes(x=sample, y=value, fill=Q)) +
geom_bar(stat="identity", position="stack") +
scale_x_discrete(name = "Sample") +
ylab("Admixture proportions") +
labs(fill = "K", subtitle = "K = 2") + # change legend title to "K"
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# plot the data for k = 2
all_data %>%
filter(k == 2) %>% # filter for k = 2
mutate(sample = factor(sample, levels = unique(sample))) %>%
ggplot(aes(x=sample, y=value, fill=Q)) +
geom_bar(stat="identity", position="stack") +
scale_x_discrete(name = "Sample") +
ylab("Admixture proportions") +
labs(fill = "K", subtitle = "K = 2") + # change legend title to "K"
scale_fill_discrete(labels = c("1", "2")) + # change legend labels to "1", "2"
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# plot the data for k = 2, 3, 4
all_data %>%
ggplot(.,aes(x=sample,y=value,fill=factor(Q))) +
geom_bar(stat="identity",position="stack") +
xlab("Sample") + ylab("Admixture proportions") +
theme_bw() +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
scale_fill_brewer(palette="Set1",name="K",
labels=seq(2:4)) +
facet_wrap(~k,ncol=1)
# plot the data for k = 2, 3, 4
all_data %>%
ggplot(.,aes(x=sample,y=value,fill=factor(Q))) +
geom_bar(stat="identity",position="stack") +
xlab("Sample") + ylab("Admixture proportions") +
theme_bw() +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
scale_fill_brewer(palette="Set1",name="K",
labels=c("1", "2", "3", "4")) + # change legend labels to "1", "2", "3", "4"
facet_wrap(~k,ncol=1)
?palette
# plot the data for k = 2
all_data %>%
filter(k == 2) %>% # filter for k = 2
mutate(sample = factor(sample, levels = unique(sample))) %>%
ggplot(aes(x=sample, y=value, fill=Q)) +
geom_bar(stat="identity", position="stack") +
scale_x_discrete(name = "Sample") +
ylab("Admixture proportions") +
labs(fill = "K", subtitle = "K = 2") + # change legend title to "K"
scale_fill_discrete(labels = c("1", "2")) + # change legend labels to "1", "2"
theme(axis.text.x = element_text(angle = 60, vjust = 0.5, hjust=1))
rm(list = ls())
# Load necessary library
library(ggplot2)
library(dplyr)
library(tidyverse)
library(qqman)
# read in the file
fst <- read_table("K0_Lesina.weir.fst")
View(fst)
# add snp column
# this data does not include snp name, I will add a column with snp name
# assigning a number to each snp
length_ = dim(fst)[1] # number of rows
fst$SNP = paste("SNP", 1:length_) # add snp name
head(fst)
# remove 'chr' prefix and convert to numeric
fst$CHROM <- as.numeric(gsub("chr", "", fst$CHROM))
# replace NA values with 1
fst$CHROM[is.na(fst$CHROM)] <- 1
# replace -nan with NA
fst$WEIR_AND_COCKERHAM_FST <- gsub("-nan", NA, fst$WEIR_AND_COCKERHAM_FST)
rm(list = ls())
# Load necessary library
library(ggplot2)
library(dplyr)
library(tidyverse)
library(qqman)
# read in the file
fst <- read_table("K0_Lesina.weir.fst")
# add snp column
# this data does not include snp name, I will add a column with snp name
# assigning a number to each snp
length_ = dim(fst)[1] # number of rows
fst$SNP = paste("SNP", 1:length_) # add snp name
head(fst)
# remove 'chr' prefix and convert to numeric
fst$CHROM <- as.numeric(gsub("chr", "", fst$CHROM))
# replace NA values with 1
fst$CHROM[is.na(fst$CHROM)] <- 1
# replace -nan with NA
fst$WEIR_AND_COCKERHAM_FST <- gsub("-nan", NA, fst$WEIR_AND_COCKERHAM_FST)
# convert to numeric
fst$WEIR_AND_COCKERHAM_FST <- as.numeric(fst$WEIR_AND_COCKERHAM_FST)
# remove rows with NA in WEIR_AND_COCKERHAM_FST
fst <- fst[!is.na(fst$WEIR_AND_COCKERHAM_FST),]
# Adjust margins
par(mar = c(5, 4, 4, 2) + 0.1)
# generate a manhattan plot
manhattan(fst, chr = 'CHROM', bp = 'POS', snp = 'SNP', p = 'WEIR_AND_COCKERHAM_FST',
col = c("blue", "red"), logp = FALSE, ylab = 'WEIR AND COCKERHAM FST',
xlab = 'CHR')
# add note to the plot
mtext("Note: K0 vs Lesina", side = 1, line = 4)
# Add legend outside of plot
legend(x = 0.5, y = -0.1, legend = c("chrZ", "chr5"), fill = c("blue", "red"), xpd = TRUE)
rm(list = ls())
# Load necessary library
library(ggplot2)
library(dplyr)
library(tidyverse)
library(qqman)
# read in the file
fst <- read_table("K0_Lesina.weir.fst")
# add snp column
# this data does not include snp name, I will add a column with snp name
# assigning a number to each snp
length_ = dim(fst)[1] # number of rows
fst$SNP = paste("SNP", 1:length_) # add snp name
head(fst)
# remove 'chr' prefix and convert to numeric
fst$CHROM <- as.numeric(gsub("chr", "", fst$CHROM))
# replace NA values with 1
fst$CHROM[is.na(fst$CHROM)] <- 1
# replace -nan with NA
fst$WEIR_AND_COCKERHAM_FST <- gsub("-nan", NA, fst$WEIR_AND_COCKERHAM_FST)
# convert to numeric
fst$WEIR_AND_COCKERHAM_FST <- as.numeric(fst$WEIR_AND_COCKERHAM_FST)
# remove rows with NA in WEIR_AND_COCKERHAM_FST
fst <- fst[!is.na(fst$WEIR_AND_COCKERHAM_FST),]
# Adjust margins
par(mar = c(5, 4, 4, 2) + 0.1)
# generate a manhattan plot
manhattan(fst, chr = 'CHROM', bp = 'POS', snp = 'SNP', p = 'WEIR_AND_COCKERHAM_FST',
col = c("blue", "red"), logp = FALSE, ylab = 'WEIR AND COCKERHAM FST',
xlab = 'CHR')
# add note to the plot
mtext("Note: K0 vs Lesina", side = 1, line = 4)
# Add legend outside of plot
legend(x = 0.5, y = -0.1, legend = c("1 = chrZ", "5 = chr5"), fill = c("blue", "red"), xpd = TRUE)
rm(list = ls())
# Load necessary library
library(ggplot2)
library(dplyr)
library(tidyverse)
library(qqman)
# read in the file
fst <- read_table("8N_K0.weir.fst")
# add snp column
# this data does not include snp name, I will add a column with snp name
# assigning a number to each snp
length_ = dim(fst)[1] # number of rows
fst$SNP = paste("SNP", 1:length_) # add snp name
head(fst)
# remove 'chr' prefix and convert to numeric
fst$CHROM <- as.numeric(gsub("chr", "", fst$CHROM))
# replace NA values with 1
fst$CHROM[is.na(fst$CHROM)] <- 1
# replace -nan with NA
fst$WEIR_AND_COCKERHAM_FST <- gsub("-nan", NA, fst$WEIR_AND_COCKERHAM_FST)
# convert to numeric
fst$WEIR_AND_COCKERHAM_FST <- as.numeric(fst$WEIR_AND_COCKERHAM_FST)
# remove rows with NA in WEIR_AND_COCKERHAM_FST
fst <- fst[!is.na(fst$WEIR_AND_COCKERHAM_FST),]
# Adjust margins
par(mar = c(5, 4, 4, 2) + 0.1)
# generate a manhattan plot
manhattan(fst, chr = 'CHROM', bp = 'POS', snp = 'SNP', p = 'WEIR_AND_COCKERHAM_FST',
col = c("blue", "red"), logp = FALSE, ylab = 'WEIR AND COCKERHAM FST',
xlab = 'CHR')
# add note to the plot
mtext("Note: 8N vs K0", side = 1, line = 4)
# Add legend outside of plot
legend(x = 0.5, y = -0.1, legend = c("1 = chrZ", "5 = chr5"), fill = c("blue", "red"), xpd = TRUE)
rm(list = ls())
# Load necessary library
library(ggplot2)
library(dplyr)
library(tidyverse)
library(qqman)
# read in the file
fst <- read_table("8N_Lesina.weir.fst")
# add snp column
# this data does not include snp name, I will add a column with snp name
# assigning a number to each snp
length_ = dim(fst)[1] # number of rows
fst$SNP = paste("SNP", 1:length_) # add snp name
head(fst)
# remove 'chr' prefix and convert to numeric
fst$CHROM <- as.numeric(gsub("chr", "", fst$CHROM))
# replace NA values with 1
fst$CHROM[is.na(fst$CHROM)] <- 1
# replace -nan with NA
fst$WEIR_AND_COCKERHAM_FST <- gsub("-nan", NA, fst$WEIR_AND_COCKERHAM_FST)
# convert to numeric
fst$WEIR_AND_COCKERHAM_FST <- as.numeric(fst$WEIR_AND_COCKERHAM_FST)
# remove rows with NA in WEIR_AND_COCKERHAM_FST
fst <- fst[!is.na(fst$WEIR_AND_COCKERHAM_FST),]
# Adjust margins
par(mar = c(5, 4, 4, 2) + 0.1)
# generate a manhattan plot
manhattan(fst, chr = 'CHROM', bp = 'POS', snp = 'SNP', p = 'WEIR_AND_COCKERHAM_FST',
col = c("blue", "red"), logp = FALSE, ylab = 'WEIR AND COCKERHAM FST',
xlab = 'CHR')
# add note to the plot
mtext("Note: 8N vs Lesina", side = 1, line = 4)
# Add legend outside of plot
legend(x = 0.5, y = -0.1, legend = c("1 = chrZ", "5 = chr5"), fill = c("blue", "red"), xpd = TRUE)
